[4mGIT-STASH[24m(1)                                                                                           Git Manual                                                                                          [4mGIT-STASH[24m(1)

[1mNAME[0m
       git-stash - Stash the changes in a dirty working directory away

[1mSYNOPSIS[0m
       [4mgit[24m [4mstash[24m list [<log-options>]
       [4mgit[24m [4mstash[24m show [-u | --include-untracked | --only-untracked] [<diff-options>] [<stash>]
       [4mgit[24m [4mstash[24m drop [-q | --quiet] [<stash>]
       [4mgit[24m [4mstash[24m pop [--index] [-q | --quiet] [<stash>]
       [4mgit[24m [4mstash[24m apply [--index] [-q | --quiet] [<stash>]
       [4mgit[24m [4mstash[24m branch <branchname> [<stash>]
       [4mgit[24m [4mstash[24m [push [-p | --patch] [-S | --staged] [-k | --[no-]keep-index] [-q | --quiet]
                    [-u | --include-untracked] [-a | --all] [(-m | --message) <message>]
                    [--pathspec-from-file=<file> [--pathspec-file-nul]]
                    [--] [<pathspec>...]]
       [4mgit[24m [4mstash[24m save [-p | --patch] [-S | --staged] [-k | --[no-]keep-index] [-q | --quiet]
                    [-u | --include-untracked] [-a | --all] [<message>]
       [4mgit[24m [4mstash[24m clear
       [4mgit[24m [4mstash[24m create [<message>]
       [4mgit[24m [4mstash[24m store [(-m | --message) <message>] [-q | --quiet] <commit>

[1mDESCRIPTION[0m
       Use [1mgit stash [22mwhen you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts
       the working directory to match the [1mHEAD [22mcommit.

       The modifications stashed away by this command can be listed with [1mgit stash list[22m, inspected with [1mgit stash show[22m, and restored (potentially on top of a different commit) with [1mgit stash apply[22m. Calling [1mgit stash[0m
       without any arguments is equivalent to [1mgit stash push[22m. A stash is by default listed as "WIP on [4mbranchname[24m ...", but you can give a more descriptive message on the command line when you create one.

       The latest stash you created is stored in [1mrefs/stash[22m; older stashes are found in the reflog of this reference and can be named using the usual reflog syntax (e.g. [1mstash@{0} [22mis the most recently created stash,
       [1mstash@{1} [22mis the one before it, [1mstash@{2.hours.ago} [22mis also possible). Stashes may also be referenced by specifying just the stash index (e.g. the integer [1mn [22mis equivalent to [1mstash@{n}[22m).

[1mCOMMANDS[0m
       push [-p|--patch] [-S|--staged] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [(-m|--message) <message>] [--pathspec-from-file=<file> [--pathspec-file-nul]] [--] [<pathspec>...]
           Save your local modifications to a new [4mstash[24m [4mentry[24m and roll them back to HEAD (in the working tree and in the index). The <message> part is optional and gives the description along with the stashed state.

           For quickly making a snapshot, you can omit "push". In this mode, non-option arguments are not allowed to prevent a misspelled subcommand from making an unwanted stash entry. The two exceptions to this
           are [1mstash -p [22mwhich acts as alias for [1mstash push -p [22mand pathspec elements, which are allowed after a double hyphen [1m-- [22mfor disambiguation.

       save [-p|--patch] [-S|--staged] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [<message>]
           This option is deprecated in favour of [4mgit[24m [4mstash[24m [4mpush[24m. It differs from "stash push" in that it cannot take pathspec. Instead, all non-option arguments are concatenated to form the stash message.

       list [<log-options>]
           List the stash entries that you currently have. Each [4mstash[24m [4mentry[24m is listed with its name (e.g.  [1mstash@{0} [22mis the latest entry, [1mstash@{1} [22mis the one before, etc.), the name of the branch that was current
           when the entry was made, and a short description of the commit the entry was based on.

               stash@{0}: WIP on submit: 6ebd0e2... Update git-stash documentation
               stash@{1}: On master: 9cc0589... Add git-stash

           The command takes options applicable to the [4mgit[24m [4mlog[24m command to control what is shown and how. See [1mgit-log[22m(1).

       show [-u|--include-untracked|--only-untracked] [<diff-options>] [<stash>]
           Show the changes recorded in the stash entry as a diff between the stashed contents and the commit back when the stash entry was first created. By default, the command shows the diffstat, but it will
           accept any format known to [4mgit[24m [4mdiff[24m (e.g., [1mgit stash show -p stash@{1} [22mto view the second most recent entry in patch form). If no [1m<diff-option> [22mis provided, the default behavior will be given by the
           [1mstash.showStat[22m, and [1mstash.showPatch [22mconfig variables. You can also use [1mstash.showIncludeUntracked [22mto set whether [1m--include-untracked [22mis enabled by default.

       pop [--index] [-q|--quiet] [<stash>]
           Remove a single stashed state from the stash list and apply it on top of the current working tree state, i.e., do the inverse operation of [1mgit stash push[22m. The working directory must match the index.

           Applying the state can fail with conflicts; in this case, it is not removed from the stash list. You need to resolve the conflicts by hand and call [1mgit stash drop [22mmanually afterwards.

       apply [--index] [-q|--quiet] [<stash>]
           Like [1mpop[22m, but do not remove the state from the stash list. Unlike [1mpop[22m, [1m<stash> [22mmay be any commit that looks like a commit created by [1mstash push [22mor [1mstash create[22m.

       branch <branchname> [<stash>]
           Creates and checks out a new branch named [1m<branchname> [22mstarting from the commit at which the [1m<stash> [22mwas originally created, applies the changes recorded in [1m<stash> [22mto the new working tree and index. If
           that succeeds, and [1m<stash> [22mis a reference of the form [1mstash@{<revision>}[22m, it then drops the [1m<stash>[22m.

           This is useful if the branch on which you ran [1mgit stash push [22mhas changed enough that [1mgit stash apply [22mfails due to conflicts. Since the stash entry is applied on top of the commit that was HEAD at the time
           [1mgit stash [22mwas run, it restores the originally stashed state with no conflicts.

       clear
           Remove all the stash entries. Note that those entries will then be subject to pruning, and may be impossible to recover (see [4mExamples[24m below for a possible strategy).

       drop [-q|--quiet] [<stash>]
           Remove a single stash entry from the list of stash entries.

       create
           Create a stash entry (which is a regular commit object) and return its object name, without storing it anywhere in the ref namespace. This is intended to be useful for scripts. It is probably not the
           command you want to use; see "push" above.

       store
           Store a given stash created via [4mgit[24m [4mstash[24m [4mcreate[24m (which is a dangling merge commit) in the stash ref, updating the stash reflog. This is intended to be useful for scripts. It is probably not the command
           you want to use; see "push" above.

[1mOPTIONS[0m
       -a, --all
           This option is only valid for [1mpush [22mand [1msave [22mcommands.

           All ignored and untracked files are also stashed and then cleaned up with [1mgit clean[22m.

       -u, --include-untracked, --no-include-untracked
           When used with the [1mpush [22mand [1msave [22mcommands, all untracked files are also stashed and then cleaned up with [1mgit clean[22m.

           When used with the [1mshow [22mcommand, show the untracked files in the stash entry as part of the diff.

       --only-untracked
           This option is only valid for the [1mshow [22mcommand.

           Show only the untracked files in the stash entry as part of the diff.

       --index
           This option is only valid for [1mpop [22mand [1mapply [22mcommands.

           Tries to reinstate not only the working tree‚Äôs changes, but also the index‚Äôs ones. However, this can fail, when you have conflicts (which are stored in the index, where you therefore can no longer apply
           the changes as they were originally).

       -k, --keep-index, --no-keep-index
           This option is only valid for [1mpush [22mand [1msave [22mcommands.

           All changes already added to the index are left intact.

       -p, --patch
           This option is only valid for [1mpush [22mand [1msave [22mcommands.

           Interactively select hunks from the diff between HEAD and the working tree to be stashed. The stash entry is constructed such that its index state is the same as the index state of your repository, and
           its worktree contains only the changes you selected interactively. The selected changes are then rolled back from your worktree. See the ‚ÄúInteractive Mode‚Äù section of [1mgit-add[22m(1) to learn how to operate
           the [1m--patch [22mmode.

           The [1m--patch [22moption implies [1m--keep-index[22m. You can use [1m--no-keep-index [22mto override this.

       -S, --staged
           This option is only valid for [1mpush [22mand [1msave [22mcommands.

           Stash only the changes that are currently staged. This is similar to basic [1mgit commit [22mexcept the state is committed to the stash instead of current branch.

           The [1m--patch [22moption has priority over this one.

       --pathspec-from-file=<file>
           This option is only valid for [1mpush [22mcommand.

           Pathspec is passed in [1m<file> [22minstead of commandline args. If [1m<file> [22mis exactly [1m- [22mthen standard input is used. Pathspec elements are separated by LF or CR/LF. Pathspec elements can be quoted as explained
           for the configuration variable [1mcore.quotePath [22m(see [1mgit-config[22m(1)). See also [1m--pathspec-file-nul [22mand global [1m--literal-pathspecs[22m.

       --pathspec-file-nul
           This option is only valid for [1mpush [22mcommand.

           Only meaningful with [1m--pathspec-from-file[22m. Pathspec elements are separated with NUL character and all other characters are taken literally (including newlines and quotes).

       -q, --quiet
           This option is only valid for [1mapply[22m, [1mdrop[22m, [1mpop[22m, [1mpush[22m, [1msave[22m, [1mstore [22mcommands.

           Quiet, suppress feedback messages.

       --
           This option is only valid for [1mpush [22mcommand.

           Separates pathspec from options for disambiguation purposes.

       <pathspec>...
           This option is only valid for [1mpush [22mcommand.

           The new stash entry records the modified states only for the files that match the pathspec. The index entries and working tree files are then rolled back to the state in HEAD only for these files, too,
           leaving files that do not match the pathspec intact.

           For more details, see the [4mpathspec[24m entry in [1mgitglossary[22m(7).

       <stash>
           This option is only valid for [1mapply[22m, [1mbranch[22m, [1mdrop[22m, [1mpop[22m, [1mshow [22mcommands.

           A reference of the form [1mstash@{<revision>}[22m. When no [1m<stash> [22mis given, the latest stash is assumed (that is, [1mstash@{0}[22m).

[1mDISCUSSION[0m
       A stash entry is represented as a commit whose tree records the state of the working directory, and its first parent is the commit at [1mHEAD [22mwhen the entry was created. The tree of the second parent records the
       state of the index when the entry is made, and it is made a child of the [1mHEAD [22mcommit. The ancestry graph looks like this:

                  .----W
                 /    /
           -----H----I

       where [1mH [22mis the [1mHEAD [22mcommit, [1mI [22mis a commit that records the state of the index, and [1mW [22mis a commit that records the state of the working tree.

[1mEXAMPLES[0m
       Pulling into a dirty tree
           When you are in the middle of something, you learn that there are upstream changes that are possibly relevant to what you are doing. When your local changes do not conflict with the changes in the
           upstream, a simple [1mgit pull [22mwill let you move forward.

           However, there are cases in which your local changes do conflict with the upstream changes, and [1mgit pull [22mrefuses to overwrite your changes. In such a case, you can stash your changes away, perform a pull,
           and then unstash, like this:

               $ git pull
                ...
               file foobar not up to date, cannot merge.
               $ git stash
               $ git pull
               $ git stash pop

       Interrupted workflow
           When you are in the middle of something, your boss comes in and demands that you fix something immediately. Traditionally, you would make a commit to a temporary branch to store your changes away, and
           return to your original branch to make the emergency fix, like this:

               # ... hack hack hack ...
               $ git switch -c my_wip
               $ git commit -a -m "WIP"
               $ git switch master
               $ edit emergency fix
               $ git commit -a -m "Fix in a hurry"
               $ git switch my_wip
               $ git reset --soft HEAD^
               # ... continue hacking ...

           You can use [4mgit[24m [4mstash[24m to simplify the above, like this:

               # ... hack hack hack ...
               $ git stash
               $ edit emergency fix
               $ git commit -a -m "Fix in a hurry"
               $ git stash pop
               # ... continue hacking ...

       Testing partial commits
           You can use [1mgit stash push --keep-index [22mwhen you want to make two or more commits out of the changes in the work tree, and you want to test each change before committing:

               # ... hack hack hack ...
               $ git add --patch foo            # add just first part to the index
               $ git stash push --keep-index    # save all other changes to the stash
               $ edit/build/test first part
               $ git commit -m 'First part'     # commit fully tested change
               $ git stash pop                  # prepare to work on all other changes
               # ... repeat above five steps until one commit remains ...
               $ edit/build/test remaining parts
               $ git commit foo -m 'Remaining parts'

       Saving unrelated changes for future use
           When you are in the middle of massive changes and you find some unrelated issue that you don‚Äôt want to forget to fix, you can do the change(s), stage them, and use [1mgit stash push --staged [22mto stash them
           out for future use. This is similar to committing the staged changes, only the commit ends-up being in the stash and not on the current branch.

               # ... hack hack hack ...
               $ git add --patch foo           # add unrelated changes to the index
               $ git stash push --staged       # save these changes to the stash
               # ... hack hack hack, finish current changes ...
               $ git commit -m 'Massive'       # commit fully tested changes
               $ git switch fixup-branch       # switch to another branch
               $ git stash pop                 # to finish work on the saved changes

       Recovering stash entries that were cleared/dropped erroneously
           If you mistakenly drop or clear stash entries, they cannot be recovered through the normal safety mechanisms. However, you can try the following incantation to get a list of stash entries that are still
           in your repository, but not reachable any more:

               git fsck --unreachable |
               grep commit | cut -d\  -f3 |
               xargs git log --merges --no-walk --grep=WIP

[1mCONFIGURATION[0m
       Everything below this line in this section is selectively included from the [1mgit-config[22m(1) documentation. The content is the same as what‚Äôs found there:

       stash.showIncludeUntracked
           If this is set to true, the [1mgit stash show [22mcommand will show the untracked files of a stash entry. Defaults to false. See the description of the [4mshow[24m command in [1mgit-stash[22m(1).

       stash.showPatch
           If this is set to true, the [1mgit stash show [22mcommand without an option will show the stash entry in patch form. Defaults to false. See the description of the [4mshow[24m command in [1mgit-stash[22m(1).

       stash.showStat
           If this is set to true, the [1mgit stash show [22mcommand without an option will show a diffstat of the stash entry. Defaults to true. See the description of the [4mshow[24m command in [1mgit-stash[22m(1).

[1mSEE ALSO[0m
       [1mgit-checkout[22m(1), [1mgit-commit[22m(1), [1mgit-reflog[22m(1), [1mgit-reset[22m(1), [1mgit-switch[22m(1)

[1mGIT[0m
       Part of the [1mgit[22m(1) suite

Git 2.43.0                                                                                             01/13/2025                                                                                          [4mGIT-STASH[24m(1)
